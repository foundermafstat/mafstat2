// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Федерации
model Federation {
  id                         Int      @id @default(autoincrement())
  name                       String   @db.VarChar(255)
  description                String?  @db.Text
  url                        String?  @db.VarChar(255)
  country                    String?  @db.VarChar(100)
  city                       String?  @db.VarChar(100)
  additionalPointsConditions Json?    @map("additional_points_conditions")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @default(now()) @map("updated_at")

  // Связи
  clubs Club[] @relation("FederationToClubs")
  games Game[] @relation("FederationToGames")

  @@map("federations")
}

// Клубы
model Club {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  description  String?  @db.Text
  url          String?  @db.VarChar(255)
  country      String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  federationId Int?     @map("federation_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  // Связи
  federation Federation? @relation("FederationToClubs", fields: [federationId], references: [id], onDelete: SetNull)
  users      User[]      @relation("ClubToUsers")
  players    Player[]    @relation("ClubToPlayers")
  games      Game[]      @relation("ClubToGames")
  ratings    Rating[]    @relation("ClubToRatings")

  @@map("clubs")
}

// Пользователи (аутентификация)
model User {
  id                Int       @id @default(autoincrement())
  name              String    @db.Text
  email             String    @unique @db.Text
  emailVerified     DateTime? @db.Timestamp()
  password          String?   @db.Text
  image             String?   @db.Text
  bio               String?   @db.Text
  role              String    @default("user") @db.Text
  surname           String?   @db.VarChar(100)
  nickname          String?   @db.VarChar(100)
  country           String?   @db.VarChar(100)
  clubId            Int?      @map("club_id")
  birthday          DateTime? @db.Date
  gender            String?   @db.VarChar(20)
  isTournamentJudge Boolean   @default(false) @map("is_tournament_judge")
  isSideJudge       Boolean   @default(false) @map("is_side_judge")
  plan              String    @default("FREE") @db.VarChar(20)
  planUpdatedAt     DateTime? @map("plan_updated_at")
  premiumNights     Int       @default(0) @map("premium_nights")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")

  // Связи
  accounts         Account[]         @relation("UserToAccounts")
  sessions         Session[]         @relation("UserToSessions")
  club             Club?             @relation("ClubToUsers", fields: [clubId], references: [id], onDelete: SetNull)
  refereeGames     Game[]            @relation("UserToGameAsReferee")
  gamePlayers      GamePlayer[]      @relation("UserToGamePlayers")
  socialNetworks   SocialNetwork[]   @relation("UserToSocialNetworks")
  gameSideReferees GameSideReferee[] @relation("UserToGameSideReferees")
  payments         Payment[]         @relation("UserToPayments")
  subscriptions    Subscription[]    @relation("UserToSubscriptions")
  ratings          Rating[]          @relation("UserToRatings")

  @@map("users")
}

// Аккаунты OAuth
model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @map("provider_account_id") @db.VarChar(255)
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type") @db.VarChar(255)
  scope             String? @db.VarChar(255)
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state") @db.VarChar(255)

  // Связи
  user User @relation("UserToAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Сессии NextAuth
model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @unique @map("session_token") @db.VarChar(255)
  expires      DateTime

  // Связи
  user User @relation("UserToSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Токены верификации
model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Игры
model Game {
  id              Int      @id @default(autoincrement())
  name            String?  @db.VarChar(255)
  description     String?  @db.Text
  gameType        String   @map("game_type") @db.VarChar(50)
  result          String?  @db.VarChar(50)
  refereeId       Int?     @map("referee_id")
  refereeComments String?  @map("referee_comments") @db.Text
  tableNumber     Int?     @map("table_number")
  clubId          Int?     @map("club_id")
  federationId    Int?     @map("federation_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  // Связи
  referee      User?             @relation("UserToGameAsReferee", fields: [refereeId], references: [id], onDelete: SetNull)
  club         Club?             @relation("ClubToGames", fields: [clubId], references: [id], onDelete: SetNull)
  federation   Federation?       @relation("FederationToGames", fields: [federationId], references: [id], onDelete: SetNull)
  gamePlayers  GamePlayer[]      @relation("GameToGamePlayers")
  gameStages   GameStage[]       @relation("GameToGameStages")
  sideReferees GameSideReferee[] @relation("GameToGameSideReferees")
  ratingGames  RatingGame[]      @relation("GameToRatingGames")

  @@map("games")
}

// Игроки
model Player {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(100)
  surname           String    @db.VarChar(100)
  nickname          String?   @db.VarChar(100)
  country           String?   @db.VarChar(100)
  clubId            Int?      @map("club_id")
  birthday          DateTime? @db.Timestamp()
  gender            String?   @db.VarChar(20)
  photoUrl          String?   @map("photo_url") @db.VarChar(255)
  isTournamentJudge Boolean   @default(false) @map("is_tournament_judge")
  isSideJudge       Boolean   @default(false) @map("is_side_judge")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")

  // Связи
  club Club? @relation("ClubToPlayers", fields: [clubId], references: [id], onDelete: SetNull)
  ratingResults RatingResult[] @relation("PlayerToRatingResults")

  @@map("players")
}

// Игроки в игре
model GamePlayer {
  id               Int      @id @default(autoincrement())
  gameId           Int      @map("game_id")
  playerId         Int      @map("player_id")
  role             String   @db.VarChar(50)
  fouls            Int      @default(0)
  additionalPoints Decimal  @default(0) @map("additional_points") @db.Decimal(5, 2)
  slotNumber       Int      @map("slot_number")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  // Связи
  game   Game @relation("GameToGamePlayers", fields: [gameId], references: [id], onDelete: Cascade)
  player User @relation("UserToGamePlayers", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameId, slotNumber])
  @@unique([gameId, playerId])
  @@map("game_players")
}

// Этапы игры
model GameStage {
  id          Int      @id @default(autoincrement())
  gameId      Int      @map("game_id")
  type        String   @db.VarChar(50)
  orderNumber Int      @map("order_number")
  data        Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Связи
  game Game @relation("GameToGameStages", fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_stages")
}

// Социальные сети
model SocialNetwork {
  id        Int      @id @default(autoincrement())
  playerId  Int      @map("player_id")
  type      String   @db.VarChar(50)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Связи
  player User @relation("UserToSocialNetworks", fields: [playerId], references: [id], onDelete: Cascade)

  @@map("social_networks")
}

// Боковые судьи игры
model GameSideReferee {
  id        Int      @id @default(autoincrement())
  gameId    Int      @map("game_id")
  playerId  Int      @map("player_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Связи
  game   Game @relation("GameToGameSideReferees", fields: [gameId], references: [id], onDelete: Cascade)
  player User @relation("UserToGameSideReferees", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId])
  @@map("game_side_referees")
}

// Продукты
model Product {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  description String    @db.Text
  price       Float
  currency    String    @default("USD") @db.VarChar(10)
  imageUrl    String?   @map("image_url") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  
  // Связи
  payments    Payment[] @relation("ProductToPayments")

  @@map("products")
}

// Платежи
model Payment {
  id                   String    @id @default(uuid())
  amount               Float
  currency             String    @default("USD") @db.VarChar(10)
  status               String    @default("pending") @db.VarChar(50)
  paymentType          String    @map("payment_type") @db.VarChar(50)
  paymentMethod        String?   @map("payment_method") @db.VarChar(50)
  stripeSessionId      String?   @unique @map("stripe_session_id") @db.VarChar(255)
  stripePaymentIntentId String?  @map("stripe_payment_intent_id") @db.VarChar(255)
  stripeCustomerId     String?   @map("stripe_customer_id") @db.VarChar(255)
  description          String?   @db.Text
  externalId           String?   @map("external_id") @db.VarChar(255)
  metadata             Json?
  productId            String?   @map("product_id")
  userId               Int       @map("user_id")
  subscriptionId       String?   @map("subscription_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  
  // Связи
  user         User         @relation("UserToPayments", fields: [userId], references: [id], onDelete: Cascade)
  product      Product?     @relation("ProductToPayments", fields: [productId], references: [id], onDelete: SetNull)
  subscription Subscription? @relation("PaymentToSubscription", fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}

// Подписки
model Subscription {
  id                   String    @id @default(uuid())
  userId               Int       @map("user_id")
  plan                 String    @db.VarChar(50)
  status               String    @default("ACTIVE") @db.VarChar(50)
  stripeSubscriptionId String?   @map("stripe_subscription_id") @db.VarChar(255)
  stripePriceId        String?   @map("stripe_price_id") @db.VarChar(255)
  startDate            DateTime  @map("start_date")
  endDate              DateTime  @map("end_date")
  canceledAt           DateTime? @map("canceled_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @map("updated_at")
  
  // Связи
  user     User      @relation("UserToSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[] @relation("PaymentToSubscription")

  @@map("subscriptions")
}

// Рейтинги
model Rating {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  ownerId     Int?      @map("owner_id")
  clubId      Int?      @map("club_id")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  // Связи
  owner        User?         @relation("UserToRatings", fields: [ownerId], references: [id], onDelete: SetNull)
  club         Club?         @relation("ClubToRatings", fields: [clubId], references: [id], onDelete: SetNull)
  ratingGames  RatingGame[]  @relation("RatingToRatingGames")
  ratingResults RatingResult[] @relation("RatingToRatingResults")

  @@map("ratings")
}

// Игры в рейтинге
model RatingGame {
  id         Int      @id @default(autoincrement())
  ratingId   Int      @map("rating_id")
  gameId     Int      @map("game_id")
  addedAt    DateTime @default(now()) @map("added_at")

  // Связи
  rating Rating @relation("RatingToRatingGames", fields: [ratingId], references: [id], onDelete: Cascade)
  game   Game   @relation("GameToRatingGames", fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([ratingId, gameId])
  @@map("rating_games")
}

// Результаты игроков в рейтинге
model RatingResult {
  id           Int      @id @default(autoincrement())
  ratingId     Int      @map("rating_id")
  playerId     Int      @map("player_id")
  points       Float    @default(0) @db.DoublePrecision
  gamesPlayed  Int      @default(0) @map("games_played")
  wins         Int      @default(0)
  civilianWins Int      @default(0) @map("civilian_wins")
  mafiaWins    Int      @default(0) @map("mafia_wins")
  donGames     Int      @default(0) @map("don_games")
  sheriffGames Int      @default(0) @map("sheriff_games")
  firstOuts    Int      @default(0) @map("first_outs")
  bestMove     String?  @db.Text @map("best_move")
  updatedAt    DateTime @default(now()) @map("updated_at")

  // Связи
  rating Rating @relation("RatingToRatingResults", fields: [ratingId], references: [id], onDelete: Cascade)
  player Player @relation("PlayerToRatingResults", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([ratingId, playerId])
  @@map("rating_results")
}
